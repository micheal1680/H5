{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","inf1","that","this","$","ajax","url","type","dataType","data","id","name","success","r","setState","list","JSON","parse","person","i","length","append","sex","file","document","getElementById","files","formData","FormData","async","cache","contentType","processData","attr","filePath","error","err","console","log","message","onClick","getInf","bind","getPerson","encType","method","updateFile","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"0LAEqBA,E,kDACpB,aAAe,IAAD,8BACb,gBACKC,MAAM,CACVC,KAAK,IAHO,E,qDAOb,IAAIC,EAAOC,KACXC,IAAEC,KAAK,CACNC,IAAI,yCACJC,KAAK,OACLC,SAAS,OACTC,KAAK,CACJC,GAAG,IACHC,KAAK,gBAENC,QARM,SAQEC,GACPX,EAAKY,SAAS,CAACb,KAAKY,S,kCAKtBT,IAAEC,KAAK,CACNC,IAAI,uCACJC,KAAK,OACLC,SAAS,OACTC,KAAK,CACJC,GAAG,IACHC,KAAK,gBAENC,QARM,SAQEC,GAGP,IAFA,IAAIE,EAAOC,KAAKC,MAAMJ,GAClBK,EAAS,KACLC,EAAE,EAAGA,EAAEJ,EAAKK,OAAQD,IAC3BD,EAASH,EAAKI,GACdf,IAAE,gBAAgBiB,OAAO,WAAWH,EAAOR,GAAG,YAAYQ,EAAOP,KAAK,YAAYO,EAAOI,IAAI,mB,mCAOhG,IAAIC,EAAOC,SAASC,eAAe,UAAUC,MAAM,GAC/CC,EAAW,IAAIC,SACnBD,EAASN,OAAO,WAAYE,GAC5BnB,IAAEC,KAAK,CACNE,KAAM,OACND,IAAK,mCACLG,KAAMkB,EACNE,OAAO,EACPC,OAAO,EACPC,aAAa,EACbC,aAAa,EACbpB,QAAS,SAASH,GACjBL,IAAE,WAAW6B,KAAK,MAAOxB,EAAKyB,WAG/BC,MAAO,SAASC,GACfC,QAAQC,IAAIF,EAAIG,c,+BAMlB,OACC,6BACC,4BAAQC,QAASrC,KAAKsC,OAAOC,KAAKvC,OAAlC,iBACA,6BAAMA,KAAKH,MAAMC,MACjB,4BAAQuC,QAASrC,KAAKwC,UAAUD,KAAKvC,OAArC,wCACA,yBAAKO,GAAG,SACP,iCAGD,6BACC,0BAAMkC,QAAQ,sBAAsBC,OAAO,QAC1C,2BAAOtC,KAAK,OAAOG,GAAG,YAEvB,4BAAQ8B,QAASrC,KAAK2C,WAAWJ,KAAKvC,OAAtC,gBACA,yBAAK4C,UAAU,iB,GA/EaC,IAAMC,WCUnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,IAAMC,WAAP,KAAkB,kBAAC,EAAD,OAA4BjC,SAASC,eAAe,SD8HhF,kBAAmBiC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7B,GACLE,QAAQF,MAAMA,EAAMI,a","file":"static/js/main.aa185b13.chunk.js","sourcesContent":["import React from 'react';\r\nimport $ from \"jquery\";//要求使用cnpm下载jquery\nexport default class App extends React.Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state={\r\n\t\t\tinf1:''\n\t\t}\n\t}\r\n\tgetInf() {\r\n\t\tlet that = this;\r\n\t\t$.ajax({\r\n\t\t\turl:'http://localhost:4000/getSimpleData.do',\r\n\t\t\ttype:'post',\r\n\t\t\tdataType:'text',\r\n\t\t\tdata:{\r\n\t\t\t\tid:100,\r\n\t\t\t\tname:'尼桑'\r\n\t\t\t},\r\n\t\t\tsuccess(r){\r\n\t\t\t\tthat.setState({inf1:r});\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\tgetPerson() {\r\n\t\t$.ajax({\r\n\t\t\turl:'http://localhost:4000/getObjArray.do',\r\n\t\t\ttype:'post',\r\n\t\t\tdataType:'text',\r\n\t\t\tdata:{\r\n\t\t\t\tid:100,\r\n\t\t\t\tname:'尼桑'\r\n\t\t\t},\r\n\t\t\tsuccess(r){\r\n\t\t\t\tlet list = JSON.parse(r);\r\n\t\t\t\tlet person = null;\r\n\t\t\t\tfor(let i=0; i<list.length; i++) {\r\n\t\t\t\t\tperson = list[i];\r\n\t\t\t\t\t$(\"#mydiv>table\").append(\"<tr><td>\"+person.id+\"</td><td>\"+person.name+\"</td><td>\"+person.sex+\"</td></tr>\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t}\n\t\r\n\tupdateFile() {\r\n\t\tlet file = document.getElementById(\"choose\").files[0];\r\n\t\tlet formData = new FormData();\r\n\t\tformData.append(\"fileData\", file);\r\n\t\t$.ajax({\r\n\t\t\ttype: 'POST',\r\n\t\t\turl: 'http://localhost:4000/profile.do',\r\n\t\t\tdata: formData,\r\n\t\t\tasync: false,\r\n\t\t\tcache: false,\r\n\t\t\tcontentType: false,\r\n\t\t\tprocessData: false,\r\n\t\t\tsuccess: function(data) {\r\n\t\t\t\t$(\".newImg\").attr(\"src\", data.filePath);\r\n\t\t\t\t// document.querySelector(\".newImg\").src=data.filePath;\r\n\t\t\t},\r\n\t\t\terror: function(err) {\r\n\t\t\t\tconsole.log(err.message);\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\t\r\n\trender() {\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<button onClick={this.getInf.bind(this)}>确定1</button> \r\n\t\t\t\t<div>{this.state.inf1}</div> \r\n\t\t\t\t<button onClick={this.getPerson.bind(this)}>得到对象烽组</button>\r\n\t\t\t\t<div id='mydiv'>\r\n\t\t\t\t\t<table>\r\n\t\t\t\t\t</table>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<form encType='multipart/form-data' method='post'>\r\n\t\t\t\t\t\t<input type=\"file\" id=\"choose\"/>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t\t<button onClick={this.updateFile.bind(this)}>上传</button>\r\n\t\t\t\t\t<img className=\"newImg\" />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\n\t\t);\n\t}\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<React.StrictMode><App /></React.StrictMode>, document.getElementById('root')\n);\r\n\nserviceWorker.unregister();\n"],"sourceRoot":""}