1.主线程不会等待子线程，主线程先依次运行。回调函数就是用于子线程的，只要有子线程就一定有回调函数（钩子函数），子线程常用于获取数据。（es5）
2.<button onclick="show()">显示学生信息</button> ：这行代码包括了事件的事件源、事件、以及时间处理函数。因此一个事件也可以采用这种表达。
点击按钮即调用show()函数
3.调用的地方要得到被调用的地方的子线程的数据（这就是回调函数的精髓）（通过回调函数获取子线程）；（es5）;
4.es6的方法获取子线程：promise（校招问到）
5.子线程存在于被调用者里面
6.回调函数没有return
7.js常用v（value的缩写）来传递参数（当没有命形参时）
8.同步:一个进程执行完，才能执行下一个进程；异步：两个进程同时进行，互不影响，谁也不等谁
9.resolve、reject分别与then、catch对应执行。即如果监听resolve(即用resolve返回数据)，则执行then,若监听reject，则执行catch。总之不可能同时执行，不能同时监听。只能分开执行，分开监听。
10.resolve：解决、接收；    reject：拒绝
11。子线程是异步操作
12.子线程需要用promise或者 回调函数 来封装，再用resolve（data）将获取的服务器数据送出去，resolve使用之后，then自动执行
13.ajax文件是用来创建子线程，用promise来封装，向服务器发出请求获取数据。
14.ajax:异步请求，局部刷新（开辟子线程，向服务器发出请求获取服务器数据；只改变部分的数据）
15.了解哪些方法可以创建(获取)子线程？ ajax、setTimeout()
16.promise的功能？resolve-then   reject-catch的功能？（resolve-then针对成功的情况；reject-catch针对失败的情况）
17.then和catch不可能同时执行，执行了then就不会执行catch（它们本身就是对立的）
18.均resolve，才then，只要有一个被reject，就catch
19.js监听是什么？